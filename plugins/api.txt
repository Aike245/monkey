** Revision 0.6 **

Changelog:
----------
0.6: Add a list of Monkey functions exported to each plugin
0.5: Add _mkp_init() and _mkp_exit() hook functions
0.4: Add hook function names
0.3: Add 'TOC' and 'About' sections
0.2: Add Plugin code definition example
0.1: Initial draft


** Table of Content **
----------------------
|-About
|-Monkey API
  |-Monkey Plugins
    |-Mandatory calls
    |-Plugin type
      |-Core
      |-Stage
      |-Networking
    |-Plugin definition
  |-Monkey exported functions
  

** About **
-----------
This draft specified the Plugin API for Monkey HTTP Daemon v0.11.0.


** Monkey API **
----------------
The Monkey API allows to extend the Monkey features and behavior through plugins, 
which are shared libraries loaded on startup. It also provides a set of specific 
functions to make easier the developer work.

Monkey Plugins
--------------
A plugin is composed by a set of mandatory plus optional function calls that act
like hooks that are called from Monkey Core.

Mandatory calls
---------------
A plugin must contains at least the following hooks functions:

------------------+---------------------------------------------------------------
 Hook function    | Description
------------------+---------------------------------------------------------------
  _mkp_init()     | Function called when registering the plugin, it also allows 
                  | to set basic configuration.
------------------+---------------------------------------------------------------
  _mkp_exit()     | Function called before to unload the plugin, the plugin
                  | must free the used memory resources
------------------+---------------------------------------------------------------


Plugin and Function Hooks
-------------------------
The following sections defines the type of plugin and each hook function associated. A
plugin can be registered to use multiple hooks just adding the right identifiers. 

-------+
 Core  |
-------+---------------------------------------------------------------------------------
 The Core plugins allow other plugins to define some data in the process context or 
 thread context depending of it needs.
---------+-----------------------+-------------------+-----------------------------------
 Context |  Identified by        | Hook function     | Description
---------+-----------------------+-------------------+-----------------------------------   
 Process | MK_PLUGIN_CORE_PRCTX  | _mkp_core_prctx() | Process context, no server loop
---------+-----------------------+-------------------+-----------------------------------
 Thread  | MK_PLUGIN_CORE_THCTX  | _mkp_core_thctx() | Thread context, no server loop
---------+-----------------------+-------------------+-----------------------------------

-------+
 Stage |
-------+-----------------------------------------------------------------------------------------
 Every single http request is placed in a cycle of stages. The request pass around five stages
 and each one provides a hook function which is invoked by Monkey. 
---------+----------------------+------------------+---------------------------------------------
 Stage # |    Identified by     | Hook function    | Description
---------+----------------------+------------------+---------------------------------------------
   10    |  MK_PLUGIN_STAGE_10  | _mkp_stage_10()  | Connection just accept()ed, not assigned
---------+----------------------+------------------+---------------------------------------------
   20    |  MK_PLUGIN_STAGE_20  | _mkp_stage_20()  | HTTP Request stream just received
---------+----------------------+------------------+---------------------------------------------
   30    |  MK_PLUGIN_STAGE_30  | _mkp_stage_30()  | Object handler, what to do with the request?
---------+----------------------+------------------+---------------------------------------------
   40    |  MK_PLUGIN_STAGE_40  | _mkp_stage_40()  | Request ended, content served
---------+----------------------+------------------+---------------------------------------------
   50    |  MK_PLUGIN_STAGE_50  | _mkp_stage_50()  | Remote connection has been closed
---------+----------------------+------------------+---------------------------------------------

------------+
 Networking |
------------+------------------------------------------------------------------------------------
 Networking plugins act like hooks for specific calls from the core, so it basically provides a 
 mechanism to replace the I/O and IP related functions. Just one running plugin can exists for
 each type.
---------+-----------------------+-----------------------------+---------------------------------
  Type   |    Identified by      | Hook function               | Description
---------+-----------------------+-----------------------------+---------------------------------
   io    | MK_PLUGIN_NETWORK_IO  | _mkp_network_io_accept()    | Accept conx
         |                       +-----------------------------+---------------------------------
         |                       | _mkp_network_io_read()      | Read socket
         |                       +-----------------------------+---------------------------------
         |                       | _mkp_network_io_write()     | Write to socket
         |                       +-----------------------------+---------------------------------
         |                       | _mkp_network_io_writev()    | Write iov to socket
         |                       +-----------------------------+---------------------------------
         |                       | _mkp_network_io_close()     | Close socket
         |                       +-----------------------------+---------------------------------
         |                       | _mkp_network_io_connect()   | Connect to
---------+-----------------------+-----------------------------+---------------------------------
   ip    | MK_PLUGIN_NETWORK_IP  | _mkp_network_ip_addr()      | Get IP address from socket
         |                       +---------------------------------------------------------------
         |                       | _mkp_network_ip_maxlen()    | Get Max IP address length
---------+-----------------------+-----------------------------+---------------------------------


Plugin definition
-----------------
A plugin *must* define it self with the following information:

  #include "plugin.h"

  mkp_data_t _shortname = "shortname";
  mkp_data_t _name      = "My Super Plugin";
  mkp_data_t _version   = "0.2";
  mkp_type_t _types     = MK_PLUGIN_CORE_PRCTX | MK_PLUGIN_NETWORK_IO |
                          MK_PLUGIN_STAGE_10 | MK_PLUGIN_STAGE_40;

Field description:

 _shortname : A simple word defining the Plugin 
 _name      : Full plugin name
 _version   : Plugin version
 _types     : Type of plugin and events associated, it can be a mix of
              types.


Monkey exported functions
-------------------------
When Monkey load a plugin and calls the _mkp_init() function, it passed a 
structure which contains mapped Monkey functions for different purposes.

Considering 'api' as the API structure, we have the following available
function calls:

--------------------------------+---------------------------------------------------------
 Function                       | Description
--------------------------------+---------------------------------------------------------
  api->mem_alloc()              | Alloc a memory space
--------------------------------+---------------------------------------------------------
  api->mem_alloc_z()            | Alloc a memory space and set it to zero 
--------------------------------+---------------------------------------------------------
  api->mem_free()               | Free a memory space
--------------------------------+---------------------------------------------------------
  api->str_build()              | Builds a memory buffer formatting the string parameters
--------------------------------+---------------------------------------------------------
  api->str_dup()                | Duplicate a string buffer
--------------------------------+---------------------------------------------------------
  api->str_search()             | Search a pattern inside a string
--------------------------------+---------------------------------------------------------
  api->str_search_n()           | Search a pattern inside a string with limit in N
--------------------------------+---------------------------------------------------------
  api->str_copy_substr()        | Copy a substring to a new memory buffer
--------------------------------+---------------------------------------------------------
  api->str_split_line()         | Split a line using a separators the space character
--------------------------------+---------------------------------------------------------
  api->file_to_buffer()         | Reads an entire file into a string buffer
--------------------------------+---------------------------------------------------------
  api->file_get_info()          | Get file information
--------------------------------+---------------------------------------------------------
  api->header_send()            | Send header information to the client
--------------------------------+---------------------------------------------------------
  api->iov_create()             | Alloc an iov structure
--------------------------------+---------------------------------------------------------
  api->iov_free()               | Free iov structure
--------------------------------+---------------------------------------------------------
  api->iov_add_entry()          | Add an entry to the iov structure
--------------------------------+---------------------------------------------------------
  api->iov_set_entry()          | Add an entry to the iov structure in a specific position
--------------------------------+---------------------------------------------------------
  api->iov_send()               | Send iov structure to a socket or pipe
--------------------------------+---------------------------------------------------------
  api->iov_print()              | Print iov structure content
--------------------------------+---------------------------------------------------------
  api->pointer_set()            | Set values to a Monkey pointer
--------------------------------+---------------------------------------------------------
  api->pointer_print()          | Print to stdout the data contained in a Monkey pointer
--------------------------------+---------------------------------------------------------
  api->socket_cork_flag()       | Enable/Disable socket CORK_FLAG
--------------------------------+---------------------------------------------------------
  api->socket_connect()         | Connect to a specific host and port
--------------------------------+---------------------------------------------------------
  api->socket_set_tcp_nodelay() | Set TCP socket on TCP_NODELAY mode
--------------------------------+---------------------------------------------------------
  api->socket_set_nonblocking() | Set socket to non-blocking mode
--------------------------------+---------------------------------------------------------
  api->socket_create()          | Create a TCP socket
--------------------------------+---------------------------------------------------------
  api->config_create()          | Create a context for a configuration file
--------------------------------+---------------------------------------------------------
  api->config_free()            | Free context of a configuration file
--------------------------------+---------------------------------------------------------
  api->config_getval()          | Retrieve a specific configuration key value
--------------------------------+---------------------------------------------------------
  api->sched_get_connection()   | Get connection scheduler details
--------------------------------+---------------------------------------------------------
  api->event_add()              | Register an event handler for a specific file 
                                | descriptor, this event is listened in the thread epoll 
                                | loop
--------------------------------+-+-------------------------------------------------------
  api->event_socket_change_mode() | Change the EPOLL event mode for an event added 
                                  | with api->event_add()
----------------------------------+-------------------------------------------------------
